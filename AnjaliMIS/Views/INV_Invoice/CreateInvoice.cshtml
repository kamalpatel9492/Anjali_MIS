@model AnjaliMIS.ViewModals.INV_InvoiceViewModal
@{
    ViewBag.Title = "Edit";
}
<style>
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        margin: 0;
    }
</style>
<script src="~/Scripts/jquery-3.3.1.min.js"></script>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Created)
    @Html.HiddenFor(model => model.InvoiceID)

    <!--Add-Edit code start-->
    <div class="col-md-12">
        <!-- BEGIN VALIDATION STATES-->
        <div class="portlet box blue">
            <div class="portlet-title">
                <div class="caption">
                    <i class="fa fa-gift"></i>Invoice
                </div>
            </div>
            <div class="portlet-body form">
                <!-- BEGIN FORM-->
                <div class="form-horizontal">
                    <div class="form-body">
                        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
                        <h3 class="form-section">Invoice Details</h3>
                        <div class="form-group">
                            @Html.LabelFor(model => model.PartyID, "Party", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.DropDownList("PartyID", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PartyID, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.InvoiceDate, "Invoice Date", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.InvoiceDate, new { htmlAttributes = new { @class = "form-control form-control-inline input-medium date-picker" } })
                                @Html.ValidationMessageFor(model => model.InvoiceDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IsLocal, "Is Local ?", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4 radio-list">
                                <label class="radio-inline">
                                    <input type="radio" name="isLocal" value="True" checked="checked">Yes
                                </label>
                                <label class="radio-inline">
                                    <input type="radio" name="isLocal" value="False">No
                                </label>
                            </div>
                            @Html.LabelFor(model => model.PONo, "PO. No. ", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.PONo, new { htmlAttributes = new { @class = "form-control", @type = "text" } })
                                @Html.ValidationMessageFor(model => model.PONo, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div id="divCGST" class="form-group" hidden>
                            @Html.LabelFor(model => model.CGST, "CGST", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <select id="ddlCGST" class="form-control"></select>
                            </div>
                            @Html.LabelFor(model => model.SGST, "SGST", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @*<select id="ddlSGST" class="form-control"></select>*@
                                <input id="txtSGSTValue" type="text" class="form-control" readonly="readonly" />
                            </div>
                        </div>

                        <div class="form-group" id="divIGST" hidden>
                            @Html.LabelFor(model => model.IGST, "IGST", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <select id="ddlIGST" class="form-control"></select>
                            </div>
                        </div>
                        <h3 class="form-section">Invoice Items</h3>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ItemID, "Item", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-2">
                                <select id="ddlItemList" class="form-control"></select>
                            </div>
                            <label class="control-label col-md-2">Quantity</label>
                            <div class="col-md-2">
                                <input id="txtQuantity" type="text" class="form-control allownumericwithoutdecimal" />
                            </div>
                            <label class="control-label col-md-2">Item Price</label>
                            <div class="col-md-2">
                                <input id="txtItemPrice" type="text" class="form-control allownumericwithdecimal" />
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2"></label>
                            <div class="col-md-10">
                                <a href="javascript:null" class="button bu-block btn default glyphicon glyphicon-plus add-row"> Add Item</a>
                            </div>
                        </div>
                        <div id="divItemList" class="form-group" hidden>
                            <label class="control-label col-md-2">Item List</label>
                            <div class="col-md-10">
                                <table class="table table-bordered table-responsive" id="selected_units">
                                    <thead>
                                        <tr>
                                            <th>Select</th>
                                            <th>Item Name</th>
                                            <th class="text-right">Quantity</th>
                                            <th class="text-right">Price</th>
                                            <th class="text-right">Total</th>
                                        </tr>
                                    </thead>
                                    <tbody class="list">
                                        <tr>
                                            <td colspan="4" class="text-right">Item Total</td>
                                            <td colspan="4" id="tdItemTotal" class="text-right"></td>
                                        </tr>
                                        <tr>
                                            <td colspan="4" class="text-right">SGST <span id="tdSpanPercentageSGSTValue"></span></td>
                                            <td colspan="4" id="tdSGST" class="text-right"></td>
                                        </tr>
                                        <tr>
                                            <td colspan="4" class="text-right">CGST <span id="tdSpanPercentageCGSTValue"></span></td>
                                            <td colspan="4" id="tdCGST" class="text-right"></td>
                                        </tr>
                                        <tr>
                                            <td colspan="4" class="text-right">IGST <span id="tdSpanPercentageIGSTValue"></span></td>
                                            <td colspan="4" id="tdIGST" class="text-right"></td>
                                        </tr>
                                        <tr>
                                            <td colspan="4" class="text-right">Final Total</td>
                                            <td colspan="4" id="tdFinalTotal" class="text-right"></td>
                                        </tr>
                                    </tbody>

                                </table>
                                <button type="button" style="float:right;" class="delete-row">Delete Item</button>
                            </div>
                        </div>
                        @*<h3 class="form-section">Payment Details</h3>*@

                        @*<div class="form-group">
                            @Html.LabelFor(model => model.Casar, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-2">
                                @Html.EditorFor(model => model.Casar, new { htmlAttributes = new { @class = "form-control allownumericwithoutdecimal" } })
                                @Html.ValidationMessageFor(model => model.Casar, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.AmountReceived, "Amount Received", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-2">
                                @Html.EditorFor(model => model.AmountReceived, new { htmlAttributes = new { @class = "form-control allownumericwithoutdecimal" } })
                                @Html.ValidationMessageFor(model => model.AmountReceived, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.AmountPending, "Amount Pending", htmlAttributes: new { @class = "control -label col-md-2 allownumericwithdecimal" })
                            <div class="col-md-2">
                                @Html.EditorFor(model => model.AmountPending, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.AmountPending, "", new { @class = "text-danger" })
                            </div>
                        </div>*@
                    </div>
                    <div class="form-actions">
                        <div class="row">
                            <div class="col-md-offset-3 col-md-9">
                                <input id="btnSave" type="button" value="Save" class="btn green" />
                                @*<input type="submit" value="Save" class="btn green" />*@
                                @Html.ActionLink("Back to List", "index", "INV_Invoice", null, new { @class = "btn default" })
                            </div>
                        </div>
                    </div>

                </div>
                <!-- END FORM-->
            </div>

        </div>
        <!-- END VALIDATION STATES-->
    </div>

    <!--Add-Edit code end-->
}
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
<script>
    var productList = [];
    var itemWiseEachStepAddTotalAmount = 0;

    @if (Model.INV_InvoiceItems != null)
    {
         @:CGSTID = @Model.CGST
         @:IGSTID = @Model.IGST
         @:SGSTID = @Model.SGST
         @:$('#divItemList').show();
                    foreach (var @item in Model.INV_InvoiceItems)
        {
            @:  productList.push({ ItemID: @item.ItemID , Quantity: @item.Quantity , PricePerUnit: @item.PricePerUnit        });

            @:var itemid = @item.ItemID;
                        @:var itemname ='@item.INV_Item.ItemName';
                        @:var Remarks;
                        if (@item.Remarks != "") {
                @: Remarks='@item.Remarks';
                        }
            @:var quantity = @item.Quantity;
                        @:var priceAmount = @item.PricePerUnit;
                        @:var markup = "<tr><td><input type='checkbox' name='record' id='" + itemid + "'></td><td>" + itemname + "</td><td class='text-right'>" + quantity + "</td><td class='text-right'>" + priceAmount + "</td><td class='text-right'>" + (priceAmount * quantity) +"</td></tr>";
                    @:itemWiseEachStepAddTotalAmount += (priceAmount * quantity);
                @:$("table .list").prepend(markup);
                    }

        @:$('#tdItemTotal').html(itemWiseEachStepAddTotalAmount);
                @:FinalCalculation();
            }
    $(document).ready(function () {

        $(".allownumericwithoutdecimal").on("keypress keyup blur",function (event) {
            $(this).val($(this).val().replace(/[^\d].+/, ""));
            if ((event.which < 48 || event.which > 57)) {
                event.preventDefault();
            }
        });

        $(".allownumericwithdecimal").on("keypress keyup blur",function (event) {
            //this.value = this.value.replace(/[^0-9\.]/g,'');
            $(this).val($(this).val().replace(/[^0-9\.]/g,''));
            if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
                event.preventDefault();
            }
        });

        //RetrieveSGST();
        RetrieveCGST();
        RetrieveIGST();
        RetrieveitemList();

        $("#ddlCGST").change(function () {
            var changeSGSTValueDependOnCGST=$("option:selected","#ddlCGST").attr("data-id");
            $("#txtSGSTValue").val("SGST-"+changeSGSTValueDependOnCGST);
            //$('#ddlSGST option[data-id="'+ changeSGSTValueDependOnCGST +'"]').prop('selected', true);
            FinalCalculation();
        });
        //$("#ddlSGST").change(function () {
        //    FinalCalculation();
        //});

        $("#ddlIGST").change(function () {
            FinalCalculation();
        });
        $('#btnSave').click(function () {
            var response = true;
            response = ValidationRemarks(false);
            if (response == false)
            {
                alert('Please fill all the compulsory field(s).');
                return false;
            }
            else
            {
                AddNewInvoiceWithItem();
            }
        });
        $("#ddlItemList").change(function () {

            //var ddlitemid = $('#ItemID').val();
            var ddlitemid = $('#ddlItemList').val();
            GetItemPrice(ddlitemid);
        });
        //$("#AmountReceived").change(function () {

        //    var newAmountPending = $('#tdFinalTotal').html() - $('#AmountReceived').val() - $('#Casar').val();
        //    $('#AmountPending').val(parseInt(newAmountPending));
        //});
        //$("#Casar").change(function () {
           
        //    var newAmountPending = $('#tdFinalTotal').html() - $('#AmountReceived').val() - $('#Casar').val();
        //    $('#AmountPending').val(parseInt(newAmountPending));
        //});
        $("#btnModalOK").click(function () {
            $('#InvoiceMessage').modal('hide');
            location.reload(true);
        });

        $('input:radio[name=isLocal]').change(function () {
            CheckIsLocal();
            //var ddlitemid = $('#ItemID').val();
            //GetItemPrice(ddlitemid);
        });

        CheckIsLocal();
        function CheckIsLocal() {
            if ($('input[name=isLocal]:checked').val() == "True") {
                //$('#divSGST').show();
                $('#divCGST').show();
                $('#divIGST').hide();
                $('#ddlIGST').val("0");

            }
            else if ($('input[name=isLocal]:checked').val() == "False") {
                $('#divCGST').hide();
                //$('#divSGST').hide();
                $('#divIGST').show();
                $('#ddlCGST').val("0");
                $('#txtSGSTValue').val("0");
            } else {
                $('#divCGST').hide();
                //$('#divSGST').hide();
                $('#divIGST').hide();
            }
        };

        $(".add-row").click(function () {


            $('#divItemList').show();
            if ($('#ddlItemList').val() != null && $('#txtItemPrice').val() != "")
            {
                var itemid = $("#ddlItemList").val();
                var itemname = $("#ddlItemList").find('option:selected').text();
                var priceAmount = $("#txtItemPrice").val();
                //var invoiceID = 1;
                var quantity = $('#txtQuantity').val();
                if((parseInt($('#txtQuantity').val()) != 0 && quantity !="") && (parseInt($('#txtItemPrice').val()) != 0 && priceAmount !=""))
                {
                    productList.push({
                        ItemID: itemid,
                        Quantity: quantity,
                        PricePerUnit: priceAmount
                    });
                    //invoiceID++;
                    var markup = "<tr><td><input type='checkbox' name='record' id='" + itemid + "'></td><td>" + itemname + "</td><td class='text-right'>" + quantity + "</td><td class='text-right'>" + priceAmount + "</td><td class='text-right'>" + (priceAmount * quantity) + "</td></tr>";
                    $("table .list").prepend(markup);
                    itemWiseEachStepAddTotalAmount += (priceAmount * quantity);
                    $('#tdItemTotal').html(itemWiseEachStepAddTotalAmount);
                    FinalCalculation();
                    $('html, body').animate({
                        scrollTop: $("#divItemList").offset().top
                    }, 2000);
                }

            }

        });


        $(".delete-row").click(function () {

            $("table tbody").find('input[name="record"]').each(function () {
                if ($(this).is(":checked")) {

                    var checkId = this.id;
                    $(this).parents("tr").remove();

                    $.each(productList, function (key, value) {

                        var checkitemid = value.ItemID;
                        var deductquantity = value.Quantity;
                        var deductpriceperunit = value.PricePerUnit;
                        if (checkId == checkitemid) {
                            //productList.pop(key);

                            productList.splice(key, 1);
                            itemWiseEachStepAddTotalAmount = itemWiseEachStepAddTotalAmount - (deductquantity * deductpriceperunit);
                            $('#tdItemTotal').html(itemWiseEachStepAddTotalAmount);
                            FinalCalculation();
                            return false;
                        }

                    });
                }
            });

        });
    });


    function ValidationRemarks()
    {
        var isValid = true;
        if($('#InvoiceID').val()!=0){
            if ($('#Remarks').val().trim() == "")
            {
                $('#Remarks').css('border-color', 'Red');
                isValid = false;
            }
            else {
                $('#Remarks').css('border-color', '#ccc');
            }
        }
        return isValid;
    }

    function GetItemPrice(ddlitemid) {

        $.ajax({
            type: 'POST',
            dataType: "json",
            data: "{ ItemID:'" + ddlitemid + "'}",
            contentType: "application/json;charset=utf-8",
            url: '@Url.Action("DropDownItemPrice", "INV_Invoice")',
            success: (function (result) {

                $('#txtItemPrice').val(result);

            }),
            error: function (errormessage) {
                alert(errormessage.responseText);
            }
        });
    }

    function AddNewInvoiceWithItem()
    {
        if(productList.length==0)
        {
            alert("please insert item");
            return false;
        }


        var newData = {
            InvoiceID:$('#InvoiceID').val(),
            PartyID: $('#PartyID').val(),
            Amount: $('#tdItemTotal').html(),
            //AmountReceived: $('#AmountReceived').val(),
            StatusID: $('#StatusID').val(),
            Remarks: $('#Remarks').val(),
            InvoiceDate: $('#InvoiceDate').val(),
            InvoiceNo: $('#InvoiceNo').val(),
            PONo: $('#PONo').val(),
            //AmountPending: $('#AmountPending').val(),
            FinYearID: $('#FinYearID').val(),
            CGST: $('#ddlCGST').val(),
            CGSTAmount: $('#tdCGST').html(),
            SGST: $('#ddlCGST').val(),//cgst and sgst both are same so
            SGSTAmount: $('#tdSGST').html(),
            IGST: $('#ddlIGST').val(),
            IGSTAmount: $('#tdIGST').html(),
            //IsLocal: $('#IsLocal').val(),
            IsLocal: $('input[name=isLocal]:checked').val(),
            IsActive: $('#IsActive').val(),
            //Casar: $('#Casar').val(),
            TotalAmount: $('#tdFinalTotal').html(),
            INV_InvoiceItems: productList
        };

        $.ajax({
            url: '@Url.Action("AddInvoice", "INV_Invoice")',
            data: JSON.stringify(newData),
            type: "POST",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {

                if(result=="failure"){
                    alert('failure');
                }
                else{
                    $('#InvoiceMessage').modal('show');
                }
            },
            error: function (errormessage) {


            }
        });
    }
    function FinalCalculation() {
        var igstpercentage = $("#ddlIGST option:selected").attr("data-id");
        var igstCalculation = parseFloat(itemWiseEachStepAddTotalAmount * igstpercentage / 100);
        if (igstCalculation > 0)
            $('#tdIGST').html(igstCalculation);
        else
            $('#tdIGST').html(0);
        if (igstpercentage > 0)
            $('#tdSpanPercentageIGSTValue').html("(" + igstpercentage + "%)");
        else
            $('#tdSpanPercentageIGSTValue').html("(" + 0 + "%)");
        var cgstpercentage = $("#ddlCGST option:selected").attr("data-id");
        var cgstCalculation = parseFloat(itemWiseEachStepAddTotalAmount * cgstpercentage / 100);
        if (cgstCalculation > 0)
            $('#tdCGST').html(cgstCalculation);
        else
            $('#tdCGST').html(0);
        if (cgstpercentage > 0)
            $('#tdSpanPercentageCGSTValue').html("(" + cgstpercentage + "%)");
        else
            $('#tdSpanPercentageCGSTValue').html("(" + 0 + "%)");
        var sgstpercentage = $("#ddlCGST option:selected").attr("data-id");
        var sgstCalculation = parseFloat(itemWiseEachStepAddTotalAmount * sgstpercentage / 100);
        $('#tdSGST').html(sgstCalculation);
        $('#tdSpanPercentageSGSTValue').html("(" + sgstpercentage + "%)");
        var finaltotal = itemWiseEachStepAddTotalAmount + parseFloat($('#tdIGST').html()) + parseFloat($('#tdCGST').html()) + parseFloat($('#tdSGST').html());
        //finaltotal=parseInt(parseFloat(finaltotal));
        //$('#tdFinalTotal').html(Math.round(finaltotal,2));
        $('#tdFinalTotal').html(parseFloat((finaltotal).toFixed(2)));

        //var newAmountPending = finaltotal - $('#AmountReceived').val() - $('#Casar').val();
        //$('#AmountPending').val(parseInt(newAmountPending));

        $('#txtQuantity').val("");
        $('#txtItemPrice').val("");
    }


    //Retrive SGST
    @*function RetrieveSGST() {
        $.ajax({
            url: '@Url.Action("RetrieveSGST", "INV_Invoice")',
            type: "GET",
            contentType: "application/json;charset=UTF-8",
            dataType: "json",
            success: (function (result) {

                if (result.length > 0) {

                    $("#ddlSGST").empty();
                    $("#ddlSGST").append('<option value="0" data-id="0">Select SGST</option>');
                    for (var i = 0; i < result.length; i++) {
                        var option = $("<option/>");
                        option.attr("value", result[i].TaxID).text(result[i].Tax).attr("data-id", result[i].Percentage);;
                        $("#ddlSGST").append(option);
                    }
                    if (SGSTID > 0)
                        $('#ddlSGST').val(SGSTID);
                    else
                        $('#ddlSGST').val(0);
                    FinalCalculation();
                }
            }),
            error: function (errormessage) {
                alert(errormessage.responseText);
            }
        });
    }*@

    //Retrive CGST
    function RetrieveCGST() {
        $.ajax({
            url: '@Url.Action("RetrieveCGST", "INV_Invoice")',
            type: "GET",
            contentType: "application/json;charset=UTF-8",
            dataType: "json",
            success: (function (result) {

                if (result.length > 0) {

                    $("#ddlCGST").empty();
                    $("#ddlCGST").append('<option value="0" data-id="0">Select CGST</option>');
                    for (var i = 0; i < result.length; i++) {
                        var option = $("<option/>");
                        option.attr("value", result[i].TaxID).text(result[i].Tax).attr("data-id", result[i].Percentage);
                        $("#ddlCGST").append(option);
                    }
                    if (CGSTID > 0){
                        $('#ddlCGST').val(CGSTID);
                        $('#txtSGSTValue').val("SGST-"+$("option:selected","#ddlCGST").attr("data-id"));
                    }
                    else{
                        $('#ddlCGST').val(0);
                        $('#txtSGSTValue').val(0);
                    }
                    FinalCalculation();
                }
            }),
            error: function (errormessage) {
                alert(errormessage.responseText);
            }
        });
    }

    //Retrive IGST
    function RetrieveIGST() {
        $.ajax({
            url: '@Url.Action("RetrieveIGST", "INV_Invoice")',
            type: "GET",
            contentType: "application/json;charset=UTF-8",
            dataType: "json",
            success: (function (result) {

                if (result.length > 0) {

                    $("#ddlIGST").empty();
                    $("#ddlIGST").append('<option value="0" data-id="0">Select IGST</option>');
                    for (var i = 0; i < result.length; i++) {
                        var option = $("<option/>");
                        option.attr("value", result[i].TaxID).text(result[i].Tax).attr("data-id", result[i].Percentage);
                        $("#ddlIGST").append(option);
                    }
                    if (IGSTID > 0)
                        $('#ddlIGST').val(IGSTID);
                    else
                        $('#ddlIGST').val(0);

                    FinalCalculation();
                }
            }),
            error: function (errormessage) {
                alert(errormessage.responseText);
            }
        });
    }


    //Retrive item list
    function RetrieveitemList() {
        $.ajax({
            url: '@Url.Action("RetrieveItemList", "INV_Invoice")',
            type: "GET",
            contentType: "application/json;charset=UTF-8",
            dataType: "json",
            success: (function (result) {

                if (result.length > 0) {

                    $("#ddlItemList").empty();
                    $("#ddlItemList").append('<option value="0">Select Item</option>');
                    for (var i = 0; i < result.length; i++) {
                        var option = $("<option/>");
                        option.attr("value", result[i].ItemID).text(result[i].ItemName);
                        $("#ddlItemList").append(option);
                    }
                }
            }),
            error: function (errormessage) {
                alert(errormessage.responseText);
            }
        });
    }
</script>
<!-- BEGIN PAGE LEVEL PLUGINS -->
<script type="text/javascript" src="/assets/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js"></script>
<script type="text/javascript" src="/assets/global/plugins/bootstrap-timepicker/js/bootstrap-timepicker.min.js"></script>
<script type="text/javascript" src="/assets/global/plugins/bootstrap-daterangepicker/daterangepicker.js"></script>
<script type="text/javascript" src="/assets/global/plugins/bootstrap-datetimepicker/js/bootstrap-datetimepicker.min.js"></script>
<!-- END PAGE LEVEL PLUGINS -->
<!-- BEGIN PAGE LEVEL SCRIPTS -->
<script src="/assets/admin/pages/scripts/components-pickers.js"></script>

<script>
    //$('#datepicker').datepicker();
    if (jQuery().datepicker) {
        $('.date-picker').datepicker({
            orientation: "left",
            autoclose: true
        });
        //$('body').removeClass("modal-open"); // fix bug when inline picker is used in modal
    }
    $('#InvoiceDate').datepicker({
        format: 'dd/mm/yyyy'
    });
    var newdate = new Date();
    var day = newdate.getDate();
    var month_index = newdate.getMonth() + 1;
    var year = newdate.getFullYear();
    $('#InvoiceDate').val(day + "/" + month_index + "/" + year);
</script>
<!-- Modal -->
<div class="modal fade" id="InvoiceMessage" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Succesfully</h4>
            </div>
            <div class="modal-body">
                <p>Succesfully submitted invoice data.</p>
            </div>
            <div class="modal-footer">
                <button id="btnModalOK" type="button" class="btn btn-default">Close</button>
                @*<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>*@
            </div>
        </div>

    </div>
</div>