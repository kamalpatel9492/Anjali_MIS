@model AnjaliMIS.ViewModals.INV_ItemConfigurationViewModal


<script src="~/Scripts/jquery-3.3.1.min.js"></script>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Created)
    @Html.HiddenFor(model => model.ItemConfigurationID)

    <!--Add-Edit code start-->
    <div class="col-md-12">
        <!-- BEGIN VALIDATION STATES-->
        <div class="portlet box blue">
            <div class="portlet-title">
                <div class="caption">
                    <i class="fa fa-gift"></i>Item Configuration
                </div>
            </div>
            <div class="portlet-body form">
                <!-- BEGIN FORM-->
                <div class="form-horizontal">
                    <div class="form-body">
                        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
                        <div class="text-danger">@ViewData["errorIssue"]</div>
                        @*<h3 class="form-section">Basic validation States</h3>*@
                        <div class="form-group">
                            @Html.LabelFor(model => model.MainItemID, "Main Item", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @if (Model.ItemConfigurationID > 0)
                                {
                                    @Html.DropDownList("MainItemID", null, htmlAttributes: new { @class = "form-control", disabled = "disabled" })
                                }
                                else
                                {
                                    @Html.DropDownList("MainItemID", null, htmlAttributes: new { @class = "form-control" })
                                }
                                @Html.ValidationMessageFor(model => model.MainItemID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        @*<div class="form-group">
                                    @Html.LabelFor(model => model.SubItemID, "Sub Item", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                            @Html.DropDownList("SubItemID", null, htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.SubItemID, "", new { @class = "text-danger" })
                                    </div>
                            </div>*@
                        <h3 class="form-section">Sub Items</h3>
                        <div class="form-group">
                            @Html.LabelFor(model => model.SubItemID, "Sub Item", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                <select id="ddlItemListSubItem" class="form-control"></select>
                            </div>

                            @Html.LabelFor(model => model.Qunatity, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.Qunatity, new { htmlAttributes = new { @class = "form-control", @onkeypress = "return isNumberKey(event)" } })
                                @*@Html.ValidationMessageFor(model => model.Qunatity, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2"></label>
                            <div class="col-md-10">
                                <a href="javascript:null" class="btn default btn-sm add-row"><i class="fa fa-plus" aria-hidden="true"></i> Add Item</a>
                            </div>
                        </div>
                        <div id="divItemList" class="form-group" hidden>
                            <label class="control-label col-md-2">Item List</label>
                            <div class="col-md-10">
                                <table class="table table-bordered table-responsive" id="selected_units">
                                    <thead>
                                        <tr>
                                            <th>Select</th>
                                            <th>Main Item</th>
                                            <th>Sub Item</th>
                                            <th class="text-right">Quantity</th>
                                        </tr>
                                    </thead>
                                    <tbody class="list">

                                        @*<tr>
                                                <td colspan="4" class="text-right">Main Item</td>
                                                <td colspan="4" id="tdMainItem"></td>
                                            </tr>
                                            <tr>
                                                <td colspan="4" class="text-right">Sub Item</td>
                                                <td colspan="4" id="tdSubItem"></td>
                                            </tr>
                                            <tr>
                                                <td colspan="4" class="text-right">Quantity</td>
                                                <td colspan="4" id="tdQuantity"></td>
                                            </tr>*@
                                    </tbody>

                                </table>
                                <button type="button" style="float:right;" class="delete-row btn default btn-sm">Delete Item</button>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                                @*@Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                    </div>
                    <div class="form-actions">
                        <div class="row">
                            <div class="col-md-offset-3 col-md-9">
                                <input id="btnSave" type="submit" value="Save" class="btn green" />
                                @Html.ActionLink("Back to List", "index", "INV_ItemConfiguration", new { @class = "btn default" })
                            </div>
                        </div>
                    </div>
                </div>
                <!-- END FORM-->
            </div>
        </div>
        <!-- END VALIDATION STATES-->
    </div>
    <!--Add-Edit code end-->

}
<script>
    @*var a = '@Model.SubItems';*@
    var productList = [];

    @if (Model.SubItems != null)
    {

         @:$('#divItemList').show();
                                    foreach (var @item in Model.SubItems)
        {
            @:  productList.push({ SubItemID: @item.SubItemID, Qunatity: @item.Qunatity            });

            @:var subItemID = @item.SubItemID;
                                        @:var MainItemID ='@item.INV_Item.ItemName';
                                        @:var itemname ='@item.INV_Item1.ItemName';
                                        @:var Remarks;
                                        if (@item.Remarks != "") {
                @: Remarks='@item.Remarks';
                                        }
            @:var quantity = @item.Qunatity;
                                            @:var markup = "<tr><td><input type='checkbox' name='record' id='" + subItemID + "'></td><td>" + MainItemID + "</td><td>" + itemname + "</td><td class='text-right'>" + quantity + "</td></tr>";
                                            @:$("table .list").prepend(markup);
                                    }
    }
    //var productList = [];
    $(document).ready(function () {
      
        RetrieveitemList();
        $("#MainItemID").change(function () {

            //var ddlitemid = $('#ItemID').val();
            var mainItemID = $('#MainItemID').val();
            GetSubItem(mainItemID);
        });

        function GetSubItem(mainItemID) {

            $.ajax({
                type: 'POST',
                dataType: "json",
                data: "{ MainItemID:'" + mainItemID + "'}",
                contentType: "application/json;charset=utf-8",
                url: '@Url.Action("RetrieveItemSubList", "INV_ItemConfiguration")',
                success: (function (result) {

                    if (result.length > 0) {
                        $("#ddlItemListSubItem").empty();
                        $("#ddlItemListSubItem").append('<option value="0">Select Sub Item</option>');
                        for (var i = 0; i < result.length; i++) {
                            var option = $("<option/>");
                            option.attr("value", result[i].ItemID).text(result[i].ItemName);
                            $("#ddlItemListSubItem").append(option);
                        }
                    }
                }),
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });
        }

        $('#btnSave').click(function () {
            var response = true;
            response = ValidationRemarks(false);
            if (response == false) {
                alert('Please fill all the compulsory field(s).');
                return false;
            }
            else {
                AddNewItemConfigurationWithItem();
            }
        });

        function ValidationRemarks() {
            var isValid = true;
            if ($('#ItemConfigurationID').val() > 0) {

                if ($('#Remarks').val().trim() == "") {
                    $('#Remarks').css('border-color', 'Red');
                    isValid = false;
                }
                else {
                    $('#Remarks').css('border-color', '#ccc');
                }
            }

            return isValid;
        }

        $(".add-row").click(function () {
            var isItemEntered = false;
            $('#divItemList').show();
           
            var subItemID = $("#ddlItemListSubItem").val();
            if (subItemID == "0") {
                alert("Select Sub Item.");
                return;
            }
            var MainItemID = $("#MainItemID").find('option:selected').text();
            var itemname = $("#ddlItemListSubItem").find('option:selected').text();
            var Remarks = $('#Remarks').val();

            var invoiceID = 1;
            var quantity = $('#Qunatity').val();
            if (quantity == "0" || quantity == "") {
                alert("Enter Valid Quantity.");
                return;
            }

            $.each(productList, function (key, value) {
                if(value.SubItemID == subItemID)
                {
                    isItemEntered=true;
                }
            });

            productList.push({
                SubItemID: subItemID,
                Qunatity: quantity,
            });
            invoiceID++;
            if(!isItemEntered)
            {
                var markup = "<tr><td><input type='checkbox' name='record' id='" + subItemID + "'></td><td>" + MainItemID + "</td><td>" + itemname + "</td><td class='text-right'>" + quantity + "</td></tr>";
                $("table .list").prepend(markup);
                $('#Qunatity').val("0");
                $("#ddlItemListSubItem").val("0");
            }
            else{
                alert("Sub Item already entered.");
            }
        });
        $(".delete-row").click(function () {

            $("table tbody").find('input[name="record"]').each(function () {
                if ($(this).is(":checked")) {

                    var checkId = this.id;
                    $(this).parents("tr").remove();

                    //$.grep(productList, function (e) {
                    //
                    //     e.ItemID == checkId;
                    //});
                    $.each(productList, function (key, value) {
                        var checkitemid = value.SubItemID;
                        var deductquantity = value.Quantity;
                        if (checkId == checkitemid) {
                            //productList.pop(key);

                            productList.splice(key, 1);

                            return false;
                        }

                    });
                }
            });

        });

        //Retrive SGST
    });
    function RetrieveitemList() {
        $.ajax({
            url: '@Url.Action("RetrieveItemList", "INV_ItemConfiguration")',
            type: "GET",
            contentType: "application/json;charset=UTF-8",
            dataType: "json",
            success: (function (result) {

                if (result.length > 0) {
                    $("#ddlItemListSubItem").empty();
                    $("#ddlItemListSubItem").append('<option value="0">Select Sub Item</option>');
                    for (var i = 0; i < result.length; i++) {
                        var option = $("<option/>");
                        option.attr("value", result[i].ItemID).text(result[i].ItemName);
                        $("#ddlItemListSubItem").append(option);
                    }
                }
            }),
            error: function (errormessage) {
                alert(errormessage.responseText);
            }
        });
    }

    function AddNewItemConfigurationWithItem() {

        var newData = {
            Remarks: $('#Remarks').val(),
            MainItemID: $('#MainItemID').val(),
            INV_Items: productList
        };


        $.ajax({
            url: '@Url.Action("Create", "INV_ItemConfiguration")',
            data: JSON.stringify(newData),
            type: "POST",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {


                $('#InvoiceMessage').modal('show');
            },
            error: function (errormessage) {

            }
        });
    }
</script>
<script type="text/javascript">
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
</script>
