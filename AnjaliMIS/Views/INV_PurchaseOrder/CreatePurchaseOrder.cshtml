@model AnjaliMIS.ViewModals.INV_PurchaseOrderViewModal

@{
	ViewBag.Title = "Edit";
}
@section breadcrumb {
	<li>
		@Html.ActionLink("Inventory Dashboard", "Dashboard",
								new { controller = "INV_Item" })
	</li>
}
	<script src="~/Scripts/jquery-3.3.1.min.js"></script>

@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()
	@Html.HiddenFor(model => model.Created)
	@Html.HiddenFor(model => model.PurchaseOrderID)
	<!--Add-Edit code start-->
	<div class="col-md-12">
		<!-- BEGIN VALIDATION STATES-->
		<div class="portlet box blue">
			<div class="portlet-title">
				<div class="caption">
					<i class="fa fa-gift"></i>Purchase Order
				</div>
			</div>
			<div class="portlet-body form">
				<!-- BEGIN FORM-->
				<div class="form-horizontal">
					<div class="form-body">
						<h3 class="form-section">Purchase Order Details</h3>
						<div class="form-group">
							@Html.LabelFor(model => model.SellerPartyID, "Seller Party", htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-4">
								@Html.DropDownList("SellerPartyID", null, htmlAttributes: new { @class = "form-control" })
								@Html.ValidationMessageFor(model => model.SellerPartyID, "", new { @class = "text-danger" })
							</div>
							@Html.LabelFor(model => model.StatusID, "Status", htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-4">
								@Html.DropDownList("StatusID", null, htmlAttributes: new { @class = "form-control" })
								@Html.ValidationMessageFor(model => model.StatusID, "", new { @class = "text-danger" })
							</div>
						</div>
						@*<div class="form-group">
							@Html.LabelFor(model => model.PONo, htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-4">
								@Html.EditorFor(model => model.PONo, new { htmlAttributes = new { @class = "form-control" } })
								@Html.ValidationMessageFor(model => model.PONo, "", new { @class = "text-danger" })
							</div>
						</div>*@

						<div class="form-group">
							@Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control" } })
								@Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
							</div>
						</div>


                        <div class="form-group">
                            @Html.LabelFor(model => model.IsLocal, "Is Local ?", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4 radio-list">
                                <label class="radio-inline">
                                    <input type="radio" name="isLocal" value="True" checked="checked">Yes
                                </label>
                                <label class="radio-inline">
                                    <input type="radio" name="isLocal" value="False">No
                                </label>
                            </div>
                            @*@Html.LabelFor(model => model.IsLocal, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.IsLocal)
                                    @Html.ValidationMessageFor(model => model.IsLocal, "", new { @class = "text-danger" })
                                </div>
                            </div>*@
                        </div>


						<div id="divCGST" class="form-group" hidden>
							@Html.LabelFor(model => model.CGST, "CGST", htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@Html.DropDownList("CGST", null, htmlAttributes: new { @class = "form-control" })
								@Html.ValidationMessageFor(model => model.CGST, "", new { @class = "text-danger" })
							</div>
						</div>

						<div id="divSGST" class="form-group" hidden>
							@Html.LabelFor(model => model.SGST, "SGST", htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@Html.DropDownList("SGST", null, htmlAttributes: new { @class = "form-control" })
								@Html.ValidationMessageFor(model => model.SGST, "", new { @class = "text-danger" })
							</div>
						</div>

						<div class="form-group" id="divIGST" hidden>
							@Html.LabelFor(model => model.IGST, "IGST", htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@Html.DropDownList("IGST", null, htmlAttributes: new { @class = "form-control" })
								@Html.ValidationMessageFor(model => model.IGST, "", new { @class = "text-danger" })
							</div>
						</div>
						<h3 class="form-section">Purchase Order Items</h3>
						<div class="form-group">
							@Html.LabelFor(model => model.ItemID, "Item", htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-2">
								@Html.DropDownList("ItemID", null, htmlAttributes: new { @class = "form-control" })
								@Html.ValidationMessageFor(model => model.ItemID, "", new { @class = "text-danger" })
							</div>
							<label class="control-label col-md-2">Quantity</label>
							<div class="col-md-2">
								<input id="txtQuantity" type="text" class="form-control" />
							</div>
							<label class="control-label col-md-2">Item Price</label>
							<div class="col-md-2">
								<input id="txtItemPrice" type="text" class="form-control" />
							</div>
						</div>

						<div class="form-group">
							<label class="control-label col-md-2"></label>
							<div class="col-md-10">
								<a href="#" class="button bu-block btn default glyphicon glyphicon-plus add-row"> Add Item</a>
							</div>
						</div>
						<div id="divItemList" class="form-group" hidden>
							<label class="control-label col-md-2">Item List</label>
							<div class="col-md-10">
								<table class="table table-bordered table-responsive" id="selected_units">
									<thead>
										<tr>
											<th>Select</th>
											<th>Item Name</th>
											<th>Quantity</th>
											<th>Price</th>
											<th>Total</th>
										</tr>
									</thead>
									<tbody class="list">

										<tr>
											<td colspan="4" class="text-right">Item Total</td>
											<td colspan="4" id="tdItemTotal"></td>
										</tr>
										<tr>
											<td colspan="4" class="text-right">SGST</td>
											<td colspan="4" id="tdSGST"></td>
										</tr>
										<tr>
											<td colspan="4" class="text-right">CGST</td>
											<td colspan="4" id="tdCGST"></td>
										</tr>
										<tr>
											<td colspan="4" class="text-right">IGST</td>
											<td colspan="4" id="tdIGST"></td>
										</tr>
										<tr>
											<td colspan="4" class="text-right">Final Total</td>
											<td colspan="4" id="tdFinalTotal"></td>
										</tr>
									</tbody>

								</table>
								<button type="button" style="float:right;" class="delete-row">Delete Item</button>
							</div>
						</div>
						<h3 class="form-section">Payment Details</h3>

						<div class="form-group">
							@Html.LabelFor(model => model.Casar, htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-2">
								@Html.EditorFor(model => model.Casar, new { htmlAttributes = new { @class = "form-control" } })
								@Html.ValidationMessageFor(model => model.Casar, "", new { @class = "text-danger" })
							</div>
							@Html.LabelFor(model => model.PaidAmount, htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-2">
								@Html.EditorFor(model => model.PaidAmount, new { htmlAttributes = new { @class = "form-control" } })
								@Html.ValidationMessageFor(model => model.PaidAmount, "", new { @class = "text-danger" })
							</div>
							@Html.LabelFor(model => model.PendingAmount, htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-2">
								@Html.EditorFor(model => model.PendingAmount, new { htmlAttributes = new { @class = "form-control" } })
								@Html.ValidationMessageFor(model => model.PendingAmount, "", new { @class = "text-danger" })
							</div>
						</div>
					</div>
					<div class="form-actions">
						<div class="row">
							<div class="col-md-offset-3 col-md-9">
								<input id="btnSave" type="button" value="Save" class="btn green" />
								@*<input type="submit" value="Save" class="btn green" />*@
								@Html.ActionLink("Back to List", "index", "INV_PurchaseOrder", new { @class = "btn default" })
							</div>
						</div>
					</div>

				</div>
				<!-- END FORM-->
			</div>

		</div>
		<!-- END VALIDATION STATES-->
	</div>

	<!--Add-Edit code end-->
}

<script>
	var productList = [];
	var itemWiseEachStepAddTotalAmount = 0;
	$(document).ready(function () {
		$('#btnSave').click(function () {
			debugger;
			AddNewPurchaseOrderWithItem();
		});
		$("#ItemID").change(function () {
			debugger;
			var ddlitemid = $('#ItemID').val();
			GetItemPrice(ddlitemid);
		});
		$("#PaidAmount").change(function () {

			var newAmountPending = $('#tdFinalTotal').html() - $('#PaidAmount').val() - $('#Casar').val();
			$('#PendingAmount').val(newAmountPending);
		});
		$("#Casar").change(function () {

			var newAmountPending = $('#tdFinalTotal').html() - $('#PaidAmount').val() - $('#Casar').val();
			$('#PendingAmount').val(newAmountPending);
		});
		$("#btnModalOK").click(function () {
			$('#InvoiceMessage').modal('hide');
			location.reload(true);
		});

        $('input:radio[name=isLocal]').change(function () {
            CheckIsLocal(); 
        });
        CheckIsLocal();
        function CheckIsLocal() {
            if ($('input[name=isLocal]:checked').val() == "True") {
                $('#divSGST').show();
                $('#divCGST').show();
                $('#divIGST').hide();
            }
            else if ($('input[name=isLocal]:checked').val() == "False") {
                $('#divCGST').hide();
                $('#divSGST').hide();
                $('#divIGST').show();
            } else {
                $('#divCGST').hide();
                $('#divSGST').hide();
                $('#divIGST').hide();
            }
		};

		$(".add-row").click(function () {

			debugger;
			$('#divItemList').show();
			if ($('#ItemID').val() != null && $('#txtItemPrice').val() != "") {
				debugger;
				var itemid = $("#ItemID").val();
				var itemname = $("#ItemID").find('option:selected').text();
				var priceAmount = $("#txtItemPrice").val();
				var invoiceID = 1;
				var quantity = $('#txtQuantity').val();
				productList.push({
					//InvoiceItemID: InvoiceItemID,
					//InvoiceID: invoiceID,
					ItemID: itemid,
                    OrderedQuantity: quantity,
                    ReceivedQuantity: quantity,
                    PuchasePrice: priceAmount,
					PricePerUnit: priceAmount
				});
				invoiceID++;
				var markup = "<tr><td><input type='checkbox' name='record' id='" + itemid + "'></td><td>" + itemname + "</td><td>" + quantity + "</td><td>" + priceAmount + "</td><td>" + (priceAmount * quantity) + "</td></tr>";
				$("table .list").prepend(markup);
				itemWiseEachStepAddTotalAmount += (priceAmount * quantity);
				$('#tdItemTotal').html(itemWiseEachStepAddTotalAmount);
                FinalCalculation();
                
			}
		});


		$(".delete-row").click(function () {
			debugger;
			$("table tbody").find('input[name="record"]').each(function () {
				if ($(this).is(":checked")) {
					debugger;
					var checkId = this.id;
					$(this).parents("tr").remove();
					debugger;
					//$.grep(productList, function (e) {
					//    debugger;
					//     e.ItemID == checkId;
					//});
					debugger;
					$.each(productList, function (key, value) {
						debugger;
						var checkitemid = value.ItemID;
						var deductquantity = value.Quantity;
						var deductpriceperunit = value.PricePerUnit;
						if (checkId == checkitemid) {
							//productList.pop(key);

							productList.splice(key, 1);
							itemWiseEachStepAddTotalAmount = itemWiseEachStepAddTotalAmount - (deductquantity * deductpriceperunit);
							$('#tdItemTotal').html(itemWiseEachStepAddTotalAmount);
							FinalCalculation();
							return false;
						}

					});
				}
			});

		});
	});
	function GetItemPrice(ddlitemid) {
		debugger;
		$.ajax({
			type: 'POST',
			dataType: "json",
			data: "{ ItemID:'" + ddlitemid + "'}",
			contentType: "application/json;charset=utf-8",
			url: '@Url.Action("DropDownItemPrice", "INV_Invoice")',
			success: (function (result) {
				debugger;
				$('#txtItemPrice').val(result);

			}),
			error: function (errormessage) {
				alert(errormessage.responseText);
			}
		});
	}

	function AddNewPurchaseOrderWithItem() {
		debugger;
		var newData = {
			//InvoiceID: InvoiceID,
			//CompanyID: $('#CompanyID').val(),
			SellerPartyID: $('#SellerPartyID').val(),
			//UserID: $('#ddlupdateInstituteType').val(),
			Amount: $('#Amount').val(),
			PaidAmount: $('#PaidAmount').val(),
			StatusID: $('#StatusID').val(),
			//Created: Created,
			//Modified: Modified,
			Remarks: $('#Remarks').val(),
			PONo: $('#PONo').val(),
			PendingAmount: $('#PendingAmount').val(),
			//FinYearID: $('#FinYearID').val(),
			CGST: $('#CGST').val(),
			CGSTAmount: $('#tdCGST').html(),
			SGST: $('#SGST').val(),
			SGSTAmount: $('#tdSGST').html(),
			IGST: $('#IGST').val(),
			IGSTAmount: $('#tdIGST').html(),
            IsLocal: $('input[name=isLocal]:checked').val(),
			IsActive: $('#IsActive').val(),
			Casar: $('#Casar').val(),
			TotalAmount: $('#tdFinalTotal').html(),
            INV_PurchaseOrderItems: productList
		};
		debugger;
		console.log(newData);

		$.ajax({
			url: '@Url.Action("AddPurchaseOrder", "INV_PurchaseOrder")',
			data: JSON.stringify(newData),
			type: "POST",
			contentType: "application/json;charset=utf-8",
			dataType: "json",
			success: function (result) {
				debugger;


				$('#InvoiceMessage').modal('show');
			},
			error: function (errormessage) {
				debugger;

			}
		});
	}
	function FinalCalculation() {
		var igstCalculation = parseFloat(itemWiseEachStepAddTotalAmount * 5 / 100);
		$('#tdIGST').html(igstCalculation);
		var cgstCalculation = parseFloat(itemWiseEachStepAddTotalAmount * 5 / 100);
		$('#tdCGST').html(cgstCalculation);
		var sgstCalculation = parseFloat(itemWiseEachStepAddTotalAmount * 5 / 100);
		$('#tdSGST').html(sgstCalculation);
		var finaltotal = itemWiseEachStepAddTotalAmount + parseFloat($('#tdIGST').html()) + parseFloat($('#tdCGST').html()) + parseFloat($('#tdSGST').html());
		$('#tdFinalTotal').html(finaltotal);

		var newAmountPending = finaltotal - $('#PaidAmount').val() - $('#Casar').val();
        $('#PendingAmount').val(newAmountPending);
        $('html, body').animate({
            scrollTop: $("#divItemList").offset().top
        }, 2000);
        $('#txtQuantity').val("");
        $('#txtItemPrice').val("");
	}

</script>


<!-- Modal -->
<div class="modal fade" id="InvoiceMessage" role="dialog">
	<div class="modal-dialog">

		<!-- Modal content-->
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title">Succesfully</h4>
			</div>
			<div class="modal-body">
				<p>Succesfully submitted PO data.</p>
			</div>
			<div class="modal-footer">
				<button id="btnModalOK" type="button" class="btn btn-default">Close</button>
				@*<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>*@
			</div>
		</div>

	</div>
</div>